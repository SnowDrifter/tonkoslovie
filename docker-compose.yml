version: '3.8'

services:
  application:
    image: tonkoslovie_application
    container_name: tonkoslovie_application
    depends_on:
      - postgres
      - kafka
      - influxdb
    environment:
      DB_SERVER: postgres
      DB_DATABASE: tonkoslovie
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      REDIS_HOST: redis
      INFLUXDB_ENABLED: 'true'
      INFLUXDB_URI: http://influxdb:8086
      INFLUXDB_USER: ${INFLUXDB_USER:-admin}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD:-12345678}
      INFLUXDB_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-token}
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID:-test}
      OAUTH_GOOGLE_SECRET: ${OAUTH_GOOGLE_SECRET:-test}
      OAUTH_FB_CLIENT_ID: ${OAUTH_FB_CLIENT_ID:-test}
      OAUTH_FB_SECRET: ${OAUTH_FB_SECRET:-test}
      OAUTH_VK_CLIENT_ID: ${OAUTH_VK_CLIENT_ID:-test}
      OAUTH_VK_SECRET: ${OAUTH_VK_SECRET:-test}
      JWT_SECRET: ${JWT_SECRET:-nUmHdv1cSMjl4v1D8yD6VLIjdm4S5Q4O}
    ports:
      - 127.0.0.1:8081:8080
    restart: unless-stopped
    volumes:
      - ./nginx/nginx_local.conf:/etc/nginx/nginx.conf
      - ./data:/workspace/data
    healthcheck:
      test: "curl -f localhost:8085/actuator/health || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5

  mail:
    image: tonkoslovie_mail
    container_name: tonkoslovie_mail
    depends_on:
      - kafka
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MAIL_USERNAME: ${MAIL_USERNAME:-test}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-test}
    healthcheck:
      test: "curl -f localhost:8087/actuator/health || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:11-alpine
    container_name: tonkoslovie_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: tonkoslovie
    ports:
      - 127.0.0.1:5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 3s
      retries: 5

  redis:
    image: redis:5-alpine
    container_name: tonkoslovie_redis
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx
    container_name: tonkoslovie_nginx
    ports:
      - 127.0.0.1:80:80
    volumes:
      - ./nginx/nginx_local.conf:/etc/nginx/nginx.conf
      - ./data:/usr/share/nginx/html/tonkoslovie
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 3s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: tonkoslovie_zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVERS: zookeeper:22888:23888
    volumes:
      - ./docker_volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./docker_volumes/zookeeper/log:/var/lib/zookeeper/log
      - ./docker_volumes/zookeeper/secrets:/etc/zookeeper/secrets
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT" ]
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: tonkoslovie_kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_BROKER_ID: 1
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - 127.0.0.1:9092:9092
      - 127.0.0.1:29092:29092
    restart: unless-stopped
    volumes:
      - ./docker_volumes/kafka/data:/var/lib/kafka/data
      - ./docker_volumes/kafka/secrets:/etc/kafka/secrets
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  kafka-ui:
    image: obsidiandynamics/kafdrop:3.27.0
    container_name: tonkoslovie_kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - 127.0.0.1:9002:9000
    healthcheck:
      test: "curl -f localhost:9000/actuator/health || exit 1"
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  influxdb:
    image: influxdb:2.0-alpine
    container_name: tonkoslovie_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_ORG: tonkoslovie
      DOCKER_INFLUXDB_INIT_BUCKET: tonkoslovie
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-12345678}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-token}
    ports:
      - 127.0.0.1:8086:8086
    healthcheck:
      test: [ "CMD-SHELL", "ln -sf /bin/busybox /bin/wget && /bin/wget -q -Y off http://localhost:8086/metrics -O /dev/null > /dev/null 2>&1" ]
      interval: 10s
      timeout: 3s
      retries: 5