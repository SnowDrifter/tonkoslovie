version: '3.8'

services:
  application:
    image: tonkoslovie_application
    container_name: tonkoslovie_application
    depends_on:
      - postgres
      - kafka
      - influxdb
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_SERVER: postgres
      DB_DATABASE: tonkoslovie
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      REDIS_HOST: redis
      INFLUXDB_ENABLED: 'true'
      INFLUXDB_URI: http://influxdb:8086
      INFLUXDB_USER: ${INFLUXDB_USER:-admin}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD:-12345678}
      INFLUXDB_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-token}
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID:-test}
      OAUTH_GOOGLE_SECRET: ${OAUTH_GOOGLE_SECRET:-test}
      OAUTH_FB_CLIENT_ID: ${OAUTH_FB_CLIENT_ID:-test}
      OAUTH_FB_SECRET: ${OAUTH_FB_SECRET:-test}
      OAUTH_VK_CLIENT_ID: ${OAUTH_VK_CLIENT_ID:-test}
      OAUTH_VK_SECRET: ${OAUTH_VK_SECRET:-test}
      JWT_SECRET: ${JWT_SECRET:-nUmHdv1cSMjl4v1D8yD6VLIjdm4S5Q4O}
      SERVICE_NAME: "application.1"
    ports:
      - "127.0.0.1:8081:8080"
    volumes:
      - ./nginx/nginx_local.conf:/etc/nginx/nginx.conf
      - ./data:/workspace/data
    healthcheck:
      test: "curl -f localhost:8085/actuator/health || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5

  mail:
    image: tonkoslovie_mail
    container_name: tonkoslovie_mail
    depends_on:
      - kafka
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: 9092
      MAIL_USERNAME: ${MAIL_USERNAME:-test}
      MAIL_PASSWORD: ${MAIL_PASSWORD:-test}
      INFLUXDB_ENABLED: 'true'
      INFLUXDB_URI: http://influxdb:8086
      INFLUXDB_USER: ${INFLUXDB_USER:-admin}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD:-12345678}
      INFLUXDB_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-token}
      SERVICE_NAME: "mail.1"
    healthcheck:
      test: "curl -f localhost:8087/actuator/health || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: tonkoslovie_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_DB: tonkoslovie
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - ./docker_volumes/postgres:/var/lib/postgresql/data
    command: [ "postgres", "-c", "wal_level=logical" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: tonkoslovie_redis
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

  nginx:
    image: nginx:1.22.1
    container_name: tonkoslovie_nginx
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./docker/nginx/nginx_local.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/cors.conf:/etc/nginx/cors.conf
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 3s
      retries: 5

  kafka:
    image: bitnami/kafka:3.3.1
    container_name: tonkoslovie_kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:29092:29092"
    volumes:
      - ./docker_volumes/kafka:/bitnami/kafka
    healthcheck:
      test: "kafka-broker-api-versions.sh --version"
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  kafka-connect:
    build:
      context: docker/kafka-connect
    container_name: tonkoslovie_kafka_connect
    depends_on:
      - kafka
      - postgres
      - elastic
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      DB_HOSTNAME: postgres
      DB_DATABASE: tonkoslovie
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      ELASTIC_URL: elastic:9200
    ports:
      - "127.0.0.1:8083:8083"
    healthcheck:
      test: "curl -f localhost:8083/connectors/ || exit 1"
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  kafka-ui:
    image: obsidiandynamics/kafdrop:3.30.0
    container_name: tonkoslovie_kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "127.0.0.1:9002:9000"
    healthcheck:
      test: "curl -f localhost:9000/actuator/health || exit 1"
      start_period: 1m
      interval: 10s
      timeout: 3s
      retries: 5

  influxdb:
    image: influxdb:2.0-alpine
    container_name: tonkoslovie_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_ORG: tonkoslovie
      DOCKER_INFLUXDB_INIT_BUCKET: tonkoslovie
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-12345678}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-token}
      DOCKER_INFLUXDB_INIT_RETENTION: ${DOCKER_INFLUXDB_INIT_RETENTION:-3w}
    ports:
      - "127.0.0.1:8086:8086"
    healthcheck:
      test: [ "CMD-SHELL", "ln -sf /bin/busybox /bin/wget && /bin/wget -q -Y off http://localhost:8086/metrics -O /dev/null > /dev/null 2>&1" ]
      interval: 10s
      timeout: 3s
      retries: 5

  elastic:
    image: elasticsearch:8.4.3
    container_name: tonkoslovie_elastic
    environment:
      xpack.security.enabled: 'false'
      discovery.type: single-node
      ES_JAVA_OPTS: -Xmx500m
    ports:
      - "127.0.0.1:9200:9200"
    volumes:
      - ./docker_volumes/elastic:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://elastic:9200 >/dev/null || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: bitnami/minio:2022.12.2
    container_name: tonkoslovie_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-tonkoslovie}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-12345678}
      MINIO_SERVER_ACCESS_KEY: ${MINIO_SERVER_ACCESS_KEY:-tonkoslovie}
      MINIO_SERVER_SECRET_KEY: ${MINIO_SERVER_SECRET_KEY:-12345678}
      MINIO_DEFAULT_BUCKETS: tonkoslovie-media
    ports:
      - "127.0.0.1:9005:9000"
      - "127.0.0.1:9006:9001"
    volumes:
      - ./docker_volumes/minio/data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 3s
      retries: 5